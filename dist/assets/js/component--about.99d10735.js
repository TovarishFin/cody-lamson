(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{103:function(e,t,n){"use strict";n.r(t);var a={components:{Intro:n(60).a},metaInfo:{title:"About Cody Lamson",meta:[{key:"description",name:"description",content:"A brief introduction to Cody Lamson"}]}},s=n(1),i=Object(s.a)(a,function(){var e=this.$createElement,t=this._self._c||e;return t("Layout",[t("intro")],1)},[],!1,null,null,null);t.default=i.exports},60:function(e,t,n){"use strict";var a={},s=n(1),i=Object(s.a)(a,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("v-card",{staticClass:"mb-4",attrs:{elevation:"4"}},[n("v-card-title",[n("v-layout",{attrs:{row:"",wrap:""}},[n("v-flex",{attrs:{xs12:"",md4:"",lg3:"",xl2:""}},[n("v-avatar",{attrs:{size:256,color:"grey lighten-4"}},[n("g-image",{key:"g-image-22dbc29",staticClass:"image",attrs:{src:"/images/meAvatar.jpg",alt:"cody lamson, full stack blockchain developer"}})],1)],1),n("v-flex",{attrs:{xs12:"",md8:"",lg9:"",xl10:"","align-self-center":""}},[n("p",{staticClass:"display-3"},[e._v("Cody Lamson")]),n("p",{staticClass:"display-1 secondary--text"},[e._v("\n          Full Stack Blockchain Web Developer\n        ")])])],1)],1),n("v-card-text",[n("p",{staticClass:"headline primary--text"},[e._v("A Brief History of Cody")]),n("p",[e._v('\n      I am a full stack web developer who has spent the last several years\n      working with ethereum. However, I have been following the cryptocurrency\n      scene since 2012 (mostly bitcoin). In the past few years I have worked\n      with smart contracts as well as the DApps that connect to them. I strive\n      to write very high quality code which is extensively tested. This is\n      extremely important for things such as smart contracts where you need to\n      "get it right the first time". I have a variety of different smart\n      contract related projects which are public on my\n      '),n("a",{attrs:{target:"_blank",href:"https://github.com/TovarishFin"}},[e._v("GitHub")]),e._v(". I\n      am most comfortable working with solidity and javascript through I am\n      always happy to branch out and learn new things.\n    ")]),n("p",[e._v("\n      Before my work with ethereum related projects, I worked on various\n      projects in both a backend and frontend capacity. The most notable\n      company that I did work for was Adidas, where I was working on backend\n      for a join venture between Adidas and Ottobock. I have built some other\n      neat things for smaller clients such as a care home management system\n      where most of the work was frontend focused (though I did build the\n      supporting backend as well).\n    ")]),n("p",{staticClass:"headline primary--text"},[e._v("Core Competencies")]),n("p",{staticClass:"title secondary--text"},[e._v("Solidity/Smart Contracts")]),n("p",[e._v("\n      I have been spending both my professional and personal time on ethereum\n      based projects for the last several years. Ethereum is still quite new\n      and finding developers with more than a year of experience in this field\n      is rather uncommon. My experience shows in the quality/speed of my work,\n      the solutions I offer, and my demand/pursuit for extensive test coverage\n      when creating smart contracts.\n    ")]),n("p",{staticClass:"title secondary--text"},[e._v("Smart Contract Related Competencies")]),n("p",{staticClass:"font-weight-bold subheading"},[e._v("Upgradeable Contracts")]),n("p",[e._v('\n      Implemented a delegate call proxy factory pattern for deploying multiple\n      instances of a contract in a gas efficient manner. Took the concept\n      further and chained delegate calls in order to work around gas limits\n      for a huge smart contract. I have also come up with a pattern for "mass\n      upgradeable" smart contracts. I have implemented Upgradeable contracts\n      in one way or another for 4 different clients on different sets of smart\n      contracts so far.\n    ')]),n("p",{staticClass:"font-weight-bold subheading"},[e._v("ERC20 Tokens")]),n("p",[e._v("\n      Have plenty of experience with this industry standard. I have written\n      several audited and mainnet-deployed ERC20 token contracts. The most\n      noteable one is "),n("b",[e._v("BrickblockToken (BBK)")]),e._v(" which can be found on\n      exchanges and market cap listings.\n    ")]),n("p",{staticClass:"font-weight-bold subheading"},[e._v("ERC721")]),n("p",[e._v("\n      Have built a project implementing this standard. See PicsumToken on my\n      gitbub if you are interested in knowing more.\n    ")]),n("p",{staticClass:"font-weight-bold subheading"},[e._v("Crowdsale Contracts")]),n("p",[e._v("\n      Also very familiar with this pattern and have written different versions\n      with different requirements.\n    ")]),n("p",{staticClass:"font-weight-bold subheading"},[e._v("Dividend Paying Smart Contracts")]),n("p",[e._v("\n      Implemented a gas efficient method of distributing dividends which was\n      not common knowledge when implemented. I have seen a few other\n      implementations over time, I still think the method implemented by me is\n      the best I have seen.\n    ")]),n("p",{staticClass:"font-weight-bold subheading"},[e._v("Oraclize Integration")]),n("p",[e._v("\n      Have used for random generation as well as complex API calls requiring\n      inline assembly to parse.\n    ")]),n("p",{staticClass:"font-weight-bold subheading"},[e._v("µRaiden")]),n("p",[e._v("\n      Have implemented ERC20 tokens which use µRaiden for offchain token\n      transfers. Was my reason for getting back into python.\n    ")]),n("p",{staticClass:"font-weight-bold subheading"},[e._v("Solidity Inline Assembly")]),n("p",[e._v("\n      Have gotten pretty deep into inline assembly in order to save on gas\n      costs for smart contracts when absolutely needed. Was also needed for\n      delegate call proxies. Have used for many other things that just cant be\n      done with regular solidity\n    ")]),n("p",{staticClass:"font-weight-bold subheading"},[e._v("\n      Merkle Tree Verification\n    ")]),n("p",[e._v("\n      Have used Bitcoin block root merkle hashes for verifying Bitcoin UTXOs\n      in an Ethereum smart contract. Have a pretty good understanding on how\n      they work. Am also currently working on creating a Bitcoin clone in Go\n      which also requires merkle tree knowledge.\n    ")]),n("p",{staticClass:"font-weight-bold subheading"},[e._v("DApps")]),n("p",[e._v("\n      I know how to build Dapps using Vue, React, or plain old vanilla\n      javascript. I am no stranger to redux and vuex for wiring up complex\n      contract interactions. I have plenty of experience connecting smart\n      contracts to the web client through web3. I have built/contributed to\n      more than 5 DApps so far.\n    ")]),n("p",{staticClass:"font-weight-bold subheading"},[e._v("IPFS")]),n("p",[e._v("\n      IPFS offers some very neat features that work well with smart contracts\n      and data integrity. I Have used for large data storage requirements for\n      smart contracts at Brickblock. Have also used for storing wedding photos\n      on CryptoWeddings\n    ")]),n("p",{staticClass:"title secondary--text"},[e._v("Javascript")]),n("p",[e._v("\n      I am very comfortable working on projects which involve javascript in\n      any form. I write almost all smart contract tests in javascript. I have\n      written both servers and clients using a variety of different frameworks\n      including: Vue, React, Angular, Polymer, Node, Express etc.\n    ")]),n("p",{staticClass:"title secondary--text"},[e._v("Web Clients")]),n("p",[e._v("\n      Regarding client side work, I have extensive experience in implementing\n      all of the things that make a progressive web app. This includes such\n      things as offline functionality through service workers, push\n      notifications and offline database caching. I also have significant\n      experience with real-time database functionality along with all of the\n      benefits and headaches that come with it. As stated above, I have\n      experience with a wide range of frameworks, such as Vue, React, and\n      Angular.s\n    ")]),n("p",{staticClass:"title secondary--text"},[e._v("Backend Work")]),n("p",[e._v('\n      Regarding server side work, I have spent considerable time building APIs\n      using node as well as leveraging the server to create server side\n      rendered web applications. I have quite a bit of experience with MongoDB\n      and have a bit of experience with postgres. Lately ethereum has been my\n      "backend" for most of the applications I have been writing.\n    ')]),n("p",{staticClass:"headline primary--text"},[e._v("Currently Learning/Improving")]),n("p",{staticClass:"title secondary--text"},[e._v("\n      State Channels & Other 2nd layer solutions\n    ")]),n("p",[e._v("\n      I find state channels to be fascinating and have been doing research\n      learning different approaches to the topic. The most fascinating that I\n      have found so far is the generalized solution given by\n      "),n("a",{attrs:{href:"https://www.counterfactual.com/"}},[e._v("counterfactual")]),e._v(" If you\n      haven't read their whitepaper, I highly suggest you do!\n    ")]),n("p",{staticClass:"title secondary--text"},[e._v("\n      Other Smart Contract Blockchains\n    ")]),n("p",[e._v("\n      I have spent some time learning how things work in EOS and would am\n      trying to find the time to spend some time building a real project with\n      it. There are some very neat differences between EOS and Ethereum that\n      would make building a project with it interesting...\n    ")]),n("p",{staticClass:"title secondary--text"},[e._v("Kubernetes")]),n("p",[e._v("\n      I have also started lightly getting into dev ops using Kubernetes and\n      Google Cloud.\n    ")]),n("p",{staticClass:"title secondary--text"},[e._v("Go")]),n("p",[e._v("\n      This is a language that I really want to get into but haven't had the\n      time to create any significant projects with it. Currently I am using it\n      to create a bitcoin blockchain clone. I want to eventually look into\n      rebuilding geth from scratch. It would be a great learning experience to\n      see how the Ethereum EVM works and get a better grasp on go as well.\n    ")]),n("p",{staticClass:"title secondary--text"},[e._v("Python")]),n("p",[e._v("\n      Have used for small projects. Most recently I have used it for using\n      µRaiden in order to make off-chain ERC20 token transfers on the Ethereum\n      blockchain. I have noticed more and more neat ethereum related tools\n      being built using python... definitely need to spend more time getting\n      better with python.\n    ")]),n("p",{staticClass:"title secondary--text"},[e._v("Teamwork")]),n("p",[e._v("\n      Over the past few years I have gained more experience working in an\n      agile teams. I am always working to improve my own teamwork and\n      organizational skills.\n    ")]),n("p",{staticClass:"headline primary--text"},[e._v("Previous Work and Pet Projects")]),n("p",[e._v("\n      Because of the nature of my work, I’m not able to display all of my work\n      publicly. If you would like to see some examples or perhaps something a\n      little more specific, please get in touch and I'd be happy to send along\n      a few examples. You can find some projects (both personal and\n      professional) "),n("g-link",{attrs:{to:"/all-projects"}},[e._v("here")]),e._v(".\n    ")],1)])],1)},[],!1,null,null,null);t.a=i.exports}}]);