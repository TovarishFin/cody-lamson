(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{78:function(e){e.exports={data:{project:{title:"CryptoWeddings DApp",content:'<h2 id="my-first-personal-project-decentralized-application"><a href="#my-first-personal-project-decentralized-application" aria-hidden="true"><span class="icon icon-link"></span></a>My First Personal Project Decentralized Application</h2>\n<p>While talking with my wife one night, we came up with this idea. She took care of the designs and I took care of the smart contracts, and DApp.</p>\n<h2 id="great-practice"><a href="#great-practice" aria-hidden="true"><span class="icon icon-link"></span></a>Great Practice</h2>\n<p>I built this during while I was working at Brickblock. A lot of the patterns that I decided to use, I eventually implemented in the Brickblock platform. </p>\n<h2 id="mainnet-launch"><a href="#mainnet-launch" aria-hidden="true"><span class="icon icon-link"></span></a>Mainnet Launch?</h2>\n<p>I might one day release this on mainnet... the DApp just never seems to be done and I always have some other new thing that I want to focus on :)</p>\n',image:{type:"image",mimeType:"image/png",src:"/images/projects/crypto-weddings-dapp.png"},liveLink:"https://www.cryptoweddings.io/",features:[{name:"Smart Contract Interaction",description:"ccesses smart contracts on both testnets and mainnet using contracts built to create wedding smart contracts. Fiances can marry, divorce, set/change a wedding photo, and receive wedding gifts."},{name:"Ethereum Address Detection",description:"Detects Ethereum address in use in order to authorize an account to make changes to a wedding smart contract."},{name:"Event Detection",description:"Uses smart contract events to dispatch notification in the DApp, such as when someone has started a wedding."},{name:"Fallback Web3 Provider",description:"If no Web3 is provided through Metamask or some other provider, Infura.io is used to view data."},{name:"Server Side Rendered",description:"Rendered on node server"}],languages:[{name:"Javascript",description:"Used for client and server"},{name:"React",description:"Used for client"},{name:"Redux",description:"used for data and actions"},{name:"Redux-Saga",description:"Used for all async actions such as blockchain related functionality"},{name:"Web3",description:"Used for interacting with deployed smart contracts"},{name:"material-ui@next",description:"Uses beta versino of material-ui to implement a reasonably good looking ui quickly"},{name:"Kubernates",description:"Ddeployed through kubernetes allowing scaling when needed"}]}}}}}]);